<cfscript>
	setting requesttimeout="100000";
	
	systemOutput("==========================================", true);
	systemOutput("LUCEE PERFORMANCE PROFILING EXAMPLE", true);
	systemOutput("==========================================", true);
	systemOutput("This example shows performance profiling using ConsoleExecutionLog", true);
	systemOutput("Same workflow as coverage.cfm but with ConsoleExecutionLog for performance focus", true);
	systemOutput("", true);
	
	// STEP 1: Setup coverage directory - this is where .exl execution log files will be stored
	systemOutput("STEP 1: Setting up coverage directory for .exl execution logs", true);
	codeCoverageDir = getDirectoryFromPath( getCurrentTemplatePath() ) & "artifacts/codeCoverageRawLogs/";
	systemOutput("Coverage directory: " & codeCoverageDir, true);
	
	if ( directoryExists( codeCoverageDir ) ) {
		systemOutput("Cleaning existing coverage directory for fresh run", true);
		directoryDelete( codeCoverageDir, true ); // fresh each time
	}
	directoryCreate( codeCoverageDir, true );
	systemOutput("✓ Coverage directory ready", true);
	systemOutput("", true);

	// STEP 2: Enable execution logging - THIS IS CRITICAL for generating .exl files
	systemOutput("STEP 2: Enabling Lucee ResourceExecutionLog - THIS GENERATES THE .EXL FILES!", true);
	systemOutput("Without this step, NO coverage data will be captured!", true);
	
	exeLogger = new lucee.extension.lcov.exeLogger(request.SERVERADMINPASSWORD);
	exeLogger.enableExecutionLog(
		class = "lucee.runtime.engine.ResourceExecutionLog", // This class writes .exl files
		args = {
			"unit": "micro",        // Time unit for execution times
			"min-time": 0,          // Capture ALL executions (even 0 microseconds)
			"directory": codeCoverageDir  // Where to write .exl files
		},
		maxlogs = 0 // IMPORTANT: 0 means unlimited logs (default is only 10!)
	);
	systemOutput("✓ ResourceExecutionLog enabled - .exl files will now be generated", true);
	systemOutput("", true);

	
	// STEP 3: Run your application - performance data goes to console
	systemOutput("STEP 3: Running application code to capture performance data", true);
	testRunner = "/test/index.cfm";  // Change this to YOUR application entry point
	
	systemOutput("CRITICAL: Using internalRequest() to run code with profiling enabled", true);
	systemOutput("Performance data will appear in console output during execution", true);
	systemOutput("Running: " & testRunner, true);
	
	// THIS internalRequest() call generates performance output to console!
	internalRequest(
		template = testRunner,
		throwonerror = true
	);
	systemOutput("✓ Code execution complete - check console for performance data", true);
	systemOutput("", true);

	systemOutput("STEP 5: Disabling ConsoleExecutionLog (cleanup)", true);
	exeLogger.disableExecutionLog(class="lucee.runtime.engine.ResourceExecutionLog");
	systemOutput("✓ Performance logging disabled", true);
	systemOutput("", true);
	


	// STEP 2: Enable ConsoleExecutionLog for performance profiling for LCOV parsing and reporting
	systemOutput("STEP 2: Enabling ConsoleExecutionLog for performance profiling", true);
	systemOutput("ConsoleExecutionLog outputs to console AND generates .exl files", true);
	
	exeLogger = new lucee.extension.lcov.exeLogger(request.SERVERADMINPASSWORD);
	exeLogger.enableExecutionLog(
		class = "lucee.runtime.engine.ConsoleExecutionLog", // Outputs to console AND files
		args = {
			"min-time": 1000000, // Only log executions taking > 1ms (1,000,000 nanoseconds)
			"snippet": false,    // Don't include code snippets in output
			"stream-type": "out", // Output to stdout (could be "err" for stderr)
			"unit": "micro",     // Show execution times in microseconds
			"directory": codeCoverageDir  // Where to write .exl files
		},
		maxlogs = 0 // 0 means unlimited logs
	);
	systemOutput("✓ ConsoleExecutionLog enabled - performance data will appear in console AND .exl files", true);
	systemOutput("", true);
	


	// STEP 4: Generate reports from the .exl files (same as coverage example)
	systemOutput("STEP 4: Generating reports from .exl files using performance-profiling-reporter", true);
	systemOutput("This processes the .exl files generated by ConsoleExecutionLog", true);
	internalRequest(template=ExpandPath("/performance-profiling-reporter.cfm"),
		url={
			codeCoverageDir=codeCoverageDir
		}
	);
	systemOutput("✓ Reports generated from .exl files!", true);
	systemOutput("", true);

	// STEP 5: Disable performance logging (cleanup)
	systemOutput("STEP 5: Disabling ConsoleExecutionLog (cleanup)", true);
	exeLogger.disableExecutionLog(class="lucee.runtime.engine.ConsoleExecutionLog");
	systemOutput("✓ Performance logging disabled", true);
	systemOutput("", true);
	
	systemOutput("==========================================", true);
	systemOutput("PERFORMANCE PROFILING COMPLETE!", true);
	systemOutput("Performance data was output to console during execution", true);
	systemOutput("AND coverage reports were generated from the .exl files", true);
	systemOutput("", true);
	systemOutput("CONSOLE OUTPUT FORMAT:", true);
	systemOutput("ConsoleExecutionLog outputs performance data in this format:", true);
	systemOutput("", true);
	systemOutput("Example console output:", true);
	systemOutput("[EXECUTION] /path/to/file.cfm:startLine-endLine executionTime unit", true);
	systemOutput("", true);
	systemOutput("Format breakdown:", true);
	systemOutput("- [EXECUTION] = Log entry marker", true);
	systemOutput("- /path/to/file.cfm = Full template path", true);
	systemOutput("- :startLine-endLine = Character position range", true);
	systemOutput("- executionTime = Time taken to execute", true);
	systemOutput("- unit = Time unit (micro, milli, nano, etc.)", true);
	systemOutput("", true);
	systemOutput("Sample output:", true);
	systemOutput("[EXECUTION] /test/slow-function.cfm:245-389 1250 micro", true);
	systemOutput("This means: slow-function.cfm chars 245-389 took 1250 microseconds", true);
	systemOutput("", true);
	systemOutput("Key differences from LCOV coverage:", true);
	systemOutput("- Uses ConsoleExecutionLog (not ResourceExecutionLog)", true);
	systemOutput("- Outputs to console (not just .exl files)", true);
	systemOutput("- Shows performance data (not just line coverage)", true);
	systemOutput("- Uses performance-profiling-reporter.cfm to process .exl files", true);
	systemOutput("==========================================", true);
</cfscript>